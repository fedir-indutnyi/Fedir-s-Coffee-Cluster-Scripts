version: '3'

env:
  #config for WSL
  #LINUX_USERNAME: 'inf1wz'
  #NODE_NAME: 'wz-c-002jk'
  #LOCALHOST_IP: '127.0.0.1'
  #config for QEMU
  LINUX_USERNAME: 'osboxes'
  NODE_NAME: 'osboxes'
  LOCALHOST_IP: '127.0.0.1'

silent: false

output: prefixed

interactive: false

tasks:
  k3s-install-prerequisites:
    desc: 'Install prerequisites (sudo apt update, sudo apt upgrade, ssh server, enable ssh server,  certificate)'
    cmds:
      - |
        # cd ~
        echo "======== Updating OS (if needed) =================="
        # sudo apt update
        export LINUX_USERNAME=$LINUX_USERNAME
        echo "======== Installing SSH Server on port 22 =================="
        sudo apt install openssh-server
        sudo service ssh start
        sudo service ssh status
        echo "======== Downloading k3sup script =================="
        curl -sLS --insecure https://get.k3sup.dev | sh
        echo "======== Checking if k3sup script downloaded successfully =================="
        chmod +x k3sup
        cp ./k3sup ~/k3sup
        chmod +x ~/k3sup
        ~/k3sup --help
        echo "======== Generating local certificate =================="
        # This will not work because it asks prompt
        # ssh-keygen
        # But this will  work because it doesn't ask prompt
        # simplified without removal of existing keys:
        # sudo -u $LINUX_USERNAME ssh-keygen -t rsa -N '' <<<''
        # improved with removal of existing keys:
        yes | sudo -u $LINUX_USERNAME sh -c 'rm -f ~/.ssh/id_rsa; ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa' <<<''
        echo "yes" | ssh-copy-id $LINUX_USERNAME@$LOCALHOST_IP
        echo "======== Allow no password behavior =================="
        echo "$LINUX_USERNAME ALL=(ALL) NOPASSWD: ALL" | sudo tee -a /etc/sudoers
        export IP=$LOCALHOST_IP
        export KUBE_EDITOR="nano"
        echo "======== Install helm =================="
        sudo snap install helm --classic
        echo "======== Prerequisites were installed successfully! =================="
  k3s-install-localhost-cluster-and-run:
    desc: 'Install Local Cluster and Start it (k3s, kubectl,)'
    cmds:
      - |
        cd ~
        echo "======== Starting k3s installation .. =================="
        export IP=$LOCALHOST_IP
        export LINUX_USERNAME=$LINUX_USERNAME
        export KUBE_EDITOR="nano"
        [ -e kubeconfig ] && rm kubeconfig
        bash -c '~/k3sup install --ip $IP --user $LINUX_USERNAME --local'
        sudo chmod +rwx /etc/rancher/k3s/k3s.yaml
        echo "======== Installation of k3s finished =================="
        export KUBECONFIG=/home/$LINUX_USERNAME/kubeconfig
        echo "... make kubeconfig path permanent and kubeditor=nano"
        echo 'KUBECONFIG="/home/{{.LINUX_USERNAME}}/kubeconfig"' | sudo tee -a /etc/environment
        export KUBE_EDITOR="nano"
        echo 'KUBE_EDITOR="nano"' | sudo tee -a /etc/environment
        echo "... listing updated environment variables: "
        sudo cat /etc/environment
        export KUBECONFIG=/home/$LINUX_USERNAME/kubeconfig
        kubectl config use-context default
        # restart k3s:
        echo "======== Restarting Cluster =================="
        /usr/local/bin/k3s-killall.sh
        sudo chmod +rwx /etc/rancher/k3s/k3s.yaml
        sudo systemctl start k3s
        sudo chmod +rwx /etc/rancher/k3s/k3s.yaml
        echo "======== Trying to get cluster =================="
        kubectl get node -o wide
        echo "======== Waiting for the node to boot ...  =================="
        until kubectl wait --for condition=ready --timeout=600s node $NODE_NAME; do \
          sleep 1; \
        done
        kubectl get node -o wide
        kubectl get pods -A
        echo "======== K3s version =================="
        k3s --v
        echo "======== Cluster Successfully installed =================="
        echo "======== For WSL Reboot is needed for Kubectl and variables to take effect =================="
        echo "to access wsl under windows use : wsl hostname -I "
 
  k3s-install-argocd:
    desc: 'install argocd'
    cmds: 
      - |
        # cd ~        
        echo "======== Installing ArgoCD =================="
        kubectl get namespace | grep -q "argocd" || kubectl create namespace argocd
        # rm -rf argocd-installation
        [ -d 'argocd-installation' ] ||  mkdir 'argocd-installation'
        [ -d 'argocd-installation/crds' ] ||  mkdir 'argocd-installation/crds'
        echo "... downloading argocd installation files 1/5"
        # curl -fsSL --insecure 'https://github.com/argoproj/argo-cd/manifests/crds\?ref\=stable' './argocd-installation'
        echo "... downloading argocd installation files 1/5"
        [ -f 'argocd-installation/crds/application-crd.yaml' ] || curl -sLS --insecure 'https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/application-crd.yaml' --output './argocd-installation/crds/application-crd.yaml'
        echo "... downloading argocd installation files 2/5"
        [ -f 'argocd-installation/crds/applicationset-crd.yaml' ] || curl -sLS --insecure 'https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/applicationset-crd.yaml' --output './argocd-installation/crds/applicationset-crd.yaml'
        echo "... downloading argocd installation files 3/5"
        [ -f 'argocd-installation/crds/appproject-crd.yaml' ] || curl -sLS --insecure 'https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/appproject-crd.yaml' --output './argocd-installation/crds/appproject-crd.yaml'
        echo "... downloading argocd installation files 4/5"
        [ -f 'argocd-installation/crds/kustomization.yaml' ] || curl -sLS --insecure 'https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/kustomization.yaml' --output './argocd-installation/crds/kustomization.yaml'
        echo "... downloading argocd installation files 5/5"
        # kubectl apply -n argocd -f 'https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml'
        [ -f 'argocd-installation/install.yaml' ] || curl -sLS --insecure 'https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/install.yaml' --output './argocd-installation/install.yaml'
        echo "... installation files downloaded"
        echo "... Applying downloaded files to cluster"
        kubectl apply -n argocd -k './argocd-installation/crds'
        kubectl apply -n argocd -f './argocd-installation/install.yaml'
        kubectl get all -n argocd
        echo "... waiting for all pods go online: "
        until kubectl wait --for condition=available --timeout=600s --all deployments -n argocd; do \
          sleep 10; \
          kubectl get all -n argocd
          echo "... waiting for all pods go online: "
        done        
        kubectl get svc -n argocd
        kubectl patch service/argocd-server -n argocd --patch '{"spec": {"type": "NodePort", "ports": [{"name": "http", "port": 80, "nodePort": 30604, "targetPort": 8080}]}}'
        echo "... ArgoCD setup completed. Its available at: https://127.0.0.1:30604"
        echo "... admin user and password: "
        echo "admin"
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo 
        export ARGO_ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        echo 'ArgoCD app: https://127.0.0.1:30604' | tee -a ./argocd_credentials.txt 
        echo 'username: admin' | tee -a ./argocd_credentials.txt
        echo 'password: '$ARGO_ADMIN_PASSWORD | tee -a ./argocd_credentials.txt

        echo "======== Installing ArgoCD Completed =================="
  k3s-install-dashboard:
    desc: 'install k8s dashboard'
    cmds: 
      - |
        # cd ~        
        echo "======== Installing Kubernetes Dashboard =================="
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml
        echo "... waiting for all deployments available: "
        until kubectl wait --for condition=available --timeout=600s --all deployments -n kubernetes-dashboard; do \
          sleep 1; \
        done     
        kubectl get all -n kubernetes-dashboard
        # this line needs to be checked if we can remove it?:
        # kubectl create serviceaccount dashboard -n kubernetes-dashboard
        echo "... creating admin user (ServiceAccount)"
        kubectl apply -f dashboard-admin/dashboard-adminuser.yaml
        kubectl describe sa admin-user -n kubernetes-dashboard
        echo "... creating ClusterRoleBinding"
        kubectl apply -f dashboard-admin/dashboard-adminuser-crb.yaml
        kubectl describe ClusterRoleBinding admin-user-crb  -n kubernetes-dashboard
        echo "... editing NodePort"
        # possibly wrong (we don't need to edit https?):
        # kubectl patch service/kubernetes-dashboard -n kubernetes-dashboard --patch '{"spec": {"type": "NodePort", "ports": [{"name": "http", "port": 31191, "targetPort": 8443}, {"name": "https", "port": 443, "targetPort": 8443}]}}'
        kubectl patch service/kubernetes-dashboard -n kubernetes-dashboard --patch '{"spec": {"type": "NodePort", "ports": [{"name": "http", "port": 443, "nodePort": 31191, "targetPort": 8443}]}}'
        kubectl get svc -n kubernetes-dashboard
        kubectl get pods -n kubernetes-dashboard
        kubectl delete pod --all -n kubernetes-dashboard
        kubectl get all -n kubernetes-dashboard
        echo "... waiting for all pods go online: "
        until kubectl wait --for condition=available --timeout=600s --all deployments -n kubernetes-dashboard; do \
          sleep 1; \
        done        
        echo "... Dashboard setup completed. Its available at: https://127.0.0.1:31191"
        echo "for creating admin token run:"
        echo "kubectl -n kubernetes-dashboard create token admin-user"
        echo "... Admin token is:"
        kubectl -n kubernetes-dashboard create token admin-user

        # this line needs to be checked if we can remove it?:
        # kubectl get secret $(kubectl get ServiceAccount admin-user -n kubernetes-dashboard -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" | base64 --decode

  k3s-install-k9s:
    desc: 'Installing K9s'
    cmds: 
      - |
        cd ~
        echo "======== Installing k9s =================="
         # Via LinuxBrew
        brew install derailed/k9s/k9s
        echo "======== Installing k9s Completed =================="       
  k3s-restart-cluster:
    desc: 'Restart Cluster'
    cmds: 
      - |
        cd ~
        #restart k3s:
        echo "======== Restarting Cluster =================="
        /usr/local/bin/k3s-killall.sh
        sudo chmod +rwx /etc/rancher/k3s/k3s.yaml
        sudo systemctl start k3s
        sudo chmod +rwx /etc/rancher/k3s/k3s.yaml
        echo "======== Trying to get cluster =================="
        kubectl get node -o wide
        echo "======== Waiting for the node to boot ...  =================="
        until kubectl wait --for condition=ready --timeout=600s node $LINUX_USERNAME; do \
          sleep 1; \
        done
        kubectl get node -o wide
        kubectl get pods -A
        echo "======== Cluster Successfully restarted =================="

  
  k3s-delete-cluster:
    desc: Delete the local k3s cluster
    cmds:
      - |
        cd ~
        echo "======== Deleting Cluster and data =================="
        sudo /usr/local/bin/k3s-killall.sh
        /usr/local/bin/k3s-uninstall.sh
        echo "======== Cluster deleted =================="

